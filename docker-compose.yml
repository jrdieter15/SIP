version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sipcall_postgres
    environment:
      POSTGRES_DB: sipcall_db
      POSTGRES_USER: sipcall_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-sipcall_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - sipcall_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sipcall_user -d sipcall_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sipcall_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sipcall_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sipcall_backend
    environment:
      - DATABASE_URL=postgresql://sipcall_user:${DATABASE_PASSWORD:-sipcall_password}@postgres:5432/sipcall_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - FREESWITCH_HOST=freeswitch
      - FREESWITCH_PORT=8021
      - FREESWITCH_PASSWORD=${FREESWITCH_PASSWORD:-freeswitch_password}
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sipcall_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FreeSWITCH Telephony Server
  freeswitch:
    image: freeswitch/freeswitch:1.10.10
    container_name: sipcall_freeswitch
    environment:
      - FREESWITCH_PASSWORD=${FREESWITCH_PASSWORD:-freeswitch_password}
    volumes:
      - ./freeswitch/conf:/usr/local/freeswitch/conf
      - ./freeswitch/sounds:/usr/local/freeswitch/sounds
      - ./freeswitch/recordings:/usr/local/freeswitch/recordings
      - freeswitch_logs:/usr/local/freeswitch/log
    ports:
      - "5060:5060/udp"  # SIP
      - "5080:5080/tcp"  # SIP over TCP
      - "8021:8021/tcp"  # Event Socket
      - "16384-16394:16384-16394/udp"  # RTP
    networks:
      - sipcall_network
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_NICE
    healthcheck:
      test: ["CMD", "fs_cli", "-x", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sipcall_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - sipcall_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sipcall_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sipcall_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sipcall_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - sipcall_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Watchtower for Auto-updates
  watchtower:
    image: containrrr/watchtower
    container_name: sipcall_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 2 * * *  # Daily at 2 AM
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${SMTP_FROM_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${ADMIN_EMAIL}
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  freeswitch_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sipcall_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16